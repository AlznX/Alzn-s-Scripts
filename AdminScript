local prefix, Owner, au = ";", game.Players.LocalPlayer, false
local isAdmin = { [Owner.Name] = true, FRIEND1 = true, FRIEND2 = true }

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Sword Simulator Admin Script",
    Text = "Enjoy the script while it's available!"
})

-- Helper function to get players by partial name match
local function GetPlayer(name)
    local players = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name:lower():sub(1, #name) == name:lower() or player.DisplayName:lower():sub(1, #name) == name:lower() then
            table.insert(players, player)
        end
    end
    return players
end

-- Kill function
local function Kill(targets)
    local sword = game.Players.LocalPlayer.Backpack:FindFirstChild("sword")
    if not sword then
        warn("[Error] Sword not found.")
        return
    end

    local damageRemoteEvent = sword:FindFirstChild("Handle")
        and sword.Handle:FindFirstChild("dmg")
        and sword.Handle.dmg:FindFirstChild("RemoteEvent")
    
    if not damageRemoteEvent then
        warn("[Error] Damage RemoteEvent not found.")
        return
    end

    for _, target in ipairs(targets) do
        if target and target.Character and target.Character:FindFirstChild("Humanoid") then
            pcall(function()
                damageRemoteEvent:FireServer(target.Character.Humanoid, math.huge)
            end)
        end
    end
end

-- Continuously track and kill players
local function TrackAndKill(targets)
    while #targets > 0 do
        for i = #targets, 1, -1 do
            local target = targets[i]
            if target.Character and target.Character:FindFirstChild("Humanoid") and target.Character.Humanoid.Health > 0 then
                Kill({target})
            else
                table.remove(targets, i)
            end
        end
        task.wait(0)
    end
end

-- Auto-Farm function
local function AF()
    au = true
    local Player = game.Players.LocalPlayer
    local sword = Player.Backpack:FindFirstChild("sword")

    if not sword then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("[System] No sword found for auto-farming.", "All")
        au = false
        return
    end

    while au do
        local upEvent = sword:FindFirstChild("Handle")
            and sword.Handle:FindFirstChild("up")
            and sword.Handle.up:FindFirstChild("RemoteEvent")
        
        if upEvent then
            pcall(function()
                upEvent:FireServer()
            end)
        end
        task.wait(0)
    end
end

-- Godmode function
local function Godmode(targets)
    local localPlayer = game.Players.LocalPlayer
    local backpack = localPlayer.Backpack
    local sword = backpack:FindFirstChild("sword")
    
    if not sword then
        -- Wait until the sword is in the backpack and equip it
        repeat task.wait() until backpack:FindFirstChild("sword")
        localPlayer.Character.Humanoid:EquipTool(backpack.sword)
        sword = backpack:FindFirstChild("sword")
    end

    for _, target in ipairs(targets) do
        if target and target.Character and target.Character:FindFirstChild("Humanoid") then
            pcall(function()
                sword.Handle.dmg.RemoteEvent:FireServer(target.Character.Humanoid, -math.huge)
            end)
        end
    end
end

-- Command handler
local function HandleCommand(message, player)
    if not message:sub(1, #prefix) == prefix then return end
    local msg = message:sub(#prefix + 1)

    if msg == "cmds" and player == Owner then
        -- Prevent duplicate system messages
        if not _G.CMD_SENT then
            _G.CMD_SENT = true
            local cmds = "[System] Commands: kill(me/plr/others/all), admin(all/plr), unadmin(all/plr), af, saf, god(plr), cmds"
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(cmds, "All")
        end
    elseif msg:sub(1, 5) == "kill " and isAdmin[player.Name] then
        local target = msg:sub(6)
        if target == "all" then
            TrackAndKill(game.Players:GetPlayers())
        elseif target == "me" then
            Kill({player})
        elseif target == "others" then
            local others = {}
            for _, p in ipairs(game.Players:GetPlayers()) do
                if p.Name ~= player.Name then table.insert(others, p) end
            end
            TrackAndKill(others)
        else
            Kill(GetPlayer(target))
        end
    elseif msg:sub(1, 6) == "admin " and isAdmin[player.Name] then
        local target = msg:sub(7)
        if target == "all" then
            for _, p in ipairs(game.Players:GetPlayers()) do
                if p.Name ~= Owner.Name and not isAdmin[p.Name] then
                    isAdmin[p.Name] = true
                end
            end
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("[System] Everyone is now Admin.", "All")
        else
            for _, p in ipairs(GetPlayer(target)) do
                if p.Name ~= Owner.Name and not isAdmin[p.Name] then
                    isAdmin[p.Name] = true
                    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("[System] "..p.Name.." is now Admin.", "All")
                end
            end
        end
    elseif msg:sub(1, 8) == "unadmin " and isAdmin[player.Name] then
        local target = msg:sub(9)
        if target == "all" then
            for _, p in ipairs(game.Players:GetPlayers()) do
                if p.Name ~= Owner.Name and isAdmin[p.Name] then
                    isAdmin[p.Name] = false
                end
            end
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("[System] Everybody is no longer Admin.", "All")
        else
            for _, p in ipairs(GetPlayer(target)) do
                if p.Name ~= Owner.Name and isAdmin[p.Name] then
                    isAdmin[p.Name] = false
                    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("[System] "..p.Name.." is no longer Admin.", "All")
                end
            end
        end
    elseif msg:sub(1, 4) == "god " and isAdmin[player.Name] then
        local target = msg:sub(5)
        local players = {}
        
        if target == "all" then
            -- Apply god mode to all players except the owner and admins
            for _, p in ipairs(game.Players:GetPlayers()) do
                if p.Name ~= Owner.Name then
                    table.insert(players, p)
                end
            end
        elseif target == "others" then
            -- Apply god mode to everyone except the player issuing the command
            for _, p in ipairs(game.Players:GetPlayers()) do
                if p.Name ~= player.Name and p.Name ~= Owner.Name then
                    table.insert(players, p)
                end
            end
        elseif target == "me" then
            -- Apply god mode to the player issuing the command
            table.insert(players, player)
        else
            -- Look for a specific player by name
            players = GetPlayer(target)
        end
        
        -- Apply Godmode to each player with a 2-second delay
        for _, p in ipairs(players) do
            Godmode({p})
            task.wait(1)  -- Adds a 2-second delay between each player
            print(p.Name.." now has Godmode.")  -- Print instead of sending chat message
        end
    elseif msg == "af" and player == Owner then
        AF()
    elseif msg == "saf" and player == Owner then
        au = false
    end
end

-- Prevent multiple Chatted listeners
local handledPlayers = {}

local function SetupPlayer(player)
    if not handledPlayers[player] then
        handledPlayers[player] = true
        player.Chatted:Connect(function(message) HandleCommand(message, player) end)
    end
end

-- Connect chat commands
game.Players.PlayerAdded:Connect(SetupPlayer)

for _, player in ipairs(game.Players:GetPlayers()) do
    SetupPlayer(player)
end
